<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  Wildfly Camel :: Example :: Camel CXF JAX-WS
  %%
  Copyright (C) 2013 - 2016 RedHat
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:cxf="http://camel.apache.org/schema/cxf"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd         http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
    <cxf:cxfEndpoint
        address="http://localhost:8080/webservices/greeting"
        id="cxfConsumer" serviceClass="org.wildfly.camel.examples.cxf.jaxws.GreetingService"/>
    <!-- If available, we use jboss.bind.address instead of localhost -->
    <cxf:cxfEndpoint
        address="http://{{sys:jboss.bind.address:localhost}}:8080/webservices/greeting"
        id="cxfProducer" serviceClass="org.wildfly.camel.examples.cxf.jaxws.GreetingService"/>
        
        
         <bean id="test1" class="org.wildfly.camel.examples.cxf.jaxws.TestProcessor"/>
    <bean
        class="org.wildfly.camel.examples.cxf.jaxws.GreetingsProcessor" id="greetingsProcessor"/>
    <camelContext id="cxfws-camel-context" xmlns="http://camel.apache.org/schema/spring">
        <!--
         This route defines a CXF producer endpoint which invokes a greeting web service.

         CamelCxfWsServlet sends the required message and name parameters to the service by populating them
         within the message exchange body.
        -->
        <route id="directToCxfrsBeanRoute">
            <from id="directConsumer" uri="direct:start"/>
            <to id="cxfwsProducer" uri="cxf:bean:cxfProducer"/>
        </route>
        
        <!-- start my test -->
            <route id="timerToAamsRoute2">
            <from id="routeTimer" uri="timer://myTimer?fixedRate=true&amp;period=10000&amp;delay=10000&amp;repeatCount=3"/>
            <to uri="direct:login"/>
        </route>        
         <route>
        	<from uri="direct:login" />
        	 <setExchangePattern pattern="InOut"/>
		
	        <setHeader headerName="operationName">
			<constant>greet</constant>
		</setHeader>
		<process ref="test1"/>
              
		<!-- Calling remote web service -->						
		<to id="client1" pattern="InOut" uri="cxf:bean:cxfProducer"/>
		<!-- Any thing after the above cxf web service call doesn't get executed and route remain in the flight indefinitely -->
		<log message="just after calling webservice ${body}"></log> 
	</route>
        
        <!-- end my test -->
        
        <!--
        This route defines a CXF consumer endpoint which handles requests made to the greeting web service.

        GreetingsProcessor constructs a String greeting response to return back to the JAX-WS client.
        -->
        <route id="cxfConsumerToProcessorRoute">
            <from id="cxfrsConsumer" uri="cxf:bean:cxfConsumer"/>
            <log id="_log1" message="BODY: ${body}"/>
            <process id="processor" ref="greetingsProcessor"/>
        </route> 
        
        
    </camelContext>
</beans>
